<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

// Datei generiert von BogusCallsForAssemblyCopy.tt
using System;
using System.Diagnostics;

namespace IwAutoUpdater.DIMappings
{
    public static class BogusCallsForAssemblyCopy
    {
        public static void DoBogusCalls()
        {
		<#
	// falls man mal was debuggen muss:
	// System.Diagnostics.Debugger.Launch();

            string path = Path.GetDirectoryName( Host.ResolvePath(".") );
			
            var assemblies = new Queue<Assembly>();
            foreach (var dllFilePath in Directory.EnumerateFiles(path, "*.dll", SearchOption.AllDirectories))
            {
                if (dllFilePath.ToLowerInvariant().EndsWith(".test.dll") || dllFilePath.ToLowerInvariant().Contains("mock"))
                {
                    continue;
                }
                else if (dllFilePath.ToLowerInvariant().Contains("contracts"))
                {
                    assemblies.Enqueue(Assembly.Load(File.ReadAllBytes(dllFilePath)));
                }
                else if (Path.GetFileName(dllFilePath.ToLowerInvariant()).StartsWith("iwautoupdater"))
                {
                    assemblies.Enqueue(Assembly.Load(File.ReadAllBytes(dllFilePath)));
                }
            }

			var types = assemblies.SelectMany(a => a.GetExportedTypes());

			var knownAssemblies = new HashSet<string>();
			foreach(Type t in types)
			{
				if (!knownAssemblies.Contains(t.AssemblyQualifiedName) && !t.IsGenericType) {
					knownAssemblies.Add(t.AssemblyQualifiedName);
			#>
				var <#= t.Name #> = typeof(<#= t.FullName #>).ToString();
					Debug.WriteLine(<#= t.Name #>);

			<#	}
			}
#>
        }
    }
}