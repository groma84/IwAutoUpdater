<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

// Datei generiert von BogusCallsForAssemblyCopy.tt
using System;
using System.Diagnostics;

namespace IwAutoUpdater.DIMappings
{
	// MSBuild schmeisst DLLs raus, die nirgends im Code aufgerufen werden, auch wenn sie auf CopyLocal stehen und
	// explizit als Projekt-Referenz eingetragen sind. Daher faken wir hier Aufrufe (die nie ausgeführt werden) *seufz*.
    public static class BogusCallsForAssemblyCopy
    {
        public static void DoBogusCalls()
        {
		<#
	// falls man mal was debuggen muss:
	// System.Diagnostics.Debugger.Launch();

            string path = Path.GetDirectoryName( Host.ResolvePath(".") );
			
            var contractAssemblies = new Queue<Assembly>();
            var implementationAssemblies = new Queue<Assembly>();
            foreach (var dllFilePath in Directory.EnumerateFiles(path, "*.dll", SearchOption.AllDirectories))
            {
                if (dllFilePath.ToLowerInvariant().EndsWith(".test.dll") || dllFilePath.ToLowerInvariant().Contains("mock"))
                {
                    continue;
                }
                else if (dllFilePath.ToLowerInvariant().Contains("contracts"))
                {
                    contractAssemblies.Enqueue(Assembly.Load(File.ReadAllBytes(dllFilePath)));
                }
                else if (Path.GetFileName(dllFilePath.ToLowerInvariant()).StartsWith("iwautoupdater"))
                {
                    implementationAssemblies.Enqueue(Assembly.Load(File.ReadAllBytes(dllFilePath)));
                }
            }

			var types = contractAssemblies.SelectMany(a => a.GetExportedTypes());

			var knownAssemblies = new HashSet<string>();
			var interfaceNames = new HashSet<string>();
			foreach(Type t in types)
			{
				interfaceNames.Add(t.Name);
				if (!knownAssemblies.Contains(t.Assembly.FullName) && !t.IsGenericType) {
					knownAssemblies.Add(t.Assembly.FullName);
			#>
			// <#= t.Assembly.FullName #>
				var <#= t.Name #> = typeof(<#= t.FullName #>).ToString();
					Debug.WriteLine(<#= t.Name #>);

			<#	}
			}


			 foreach (var impl in implementationAssemblies)
            {
                var exportedTypesWithInterfaces = impl.GetExportedTypes().Where(a => a.GetInterfaces().Any());
                foreach (var t in exportedTypesWithInterfaces)
                {
                    foreach (var iface in t.GetInterfaces().Where(i => interfaceNames.Contains(i.Name)))
                    {
						if (!knownAssemblies.Contains(t.Assembly.FullName) && !t.IsGenericType) {
							knownAssemblies.Add(t.Assembly.FullName);
							#>
						// <#= t.Assembly.FullName #>
							var <#= t.Name #> = typeof(<#= t.FullName #>).ToString();
								Debug.WriteLine(<#= t.Name #>);
						<#	}
                    }
                }
            }
#>
        }
    }
}